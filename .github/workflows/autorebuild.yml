name: Build HDF5 & JHDF5

on:
  push:
    branches: [ "main", "dev*", "*-cicd" ]
  pull_request:
    branches: [ "main", "dev*", "*-cicd" ]

jobs:
  build-hdf5-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Check presence of tools
        shell: bash
        run: |
          set -ex
          zstd --help
          xz --help
          tar --help
          gcc --version
          cmake --help

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables for HDF5 build
        run: |
          echo "UPLOAD_DEBUG_ARCHIVE=true" >> $GITHUB_ENV
          echo "REPLACE_JNI=0" >> $GITHUB_ENV
          echo "CMAKE_WORKFLOW_PRESET=hict-StdShar-GNUC" >> $GITHUB_ENV
      
      - name: Compile HDF5 + Plugins (Linux)
        working-directory: ./source/c
        shell: bash
        run: ./compile_hdf5_linux_amd64.sh

      - name: Compress built HDF5
        working-directory: ./source/c/build
        shell: bash
        run: |
          set -eux
          EDIR=$(ls | grep -E '^hdf5-([0-9.]+)$')
          if [[ ! -d "${EDIR}" ]]; then
            echo "::error title=Cannot find build directory ::Cannot find build directory (detected ${EDIR}) for HDF5 version out of $(ls)"
          fi
          RDIR=$(ls "${EDIR}" | grep -E '^build([0-9]+)$')
          if [[ ! -d "${EDIR}/${RDIR}" ]]; then
            echo "::error title=Cannot find build subdirectory ::Cannot find build subdirectory (detected ${RDIR}) for HDF5 version out of $(ls)"
          fi
          PDIR="${EDIR}/${RDIR}/${CMAKE_WORKFLOW_PRESET}/"
          if [[ ! -d "${PDIR}" ]]; then
            CDIR=$(ls "${EDIR}/${RDIR}" | head -n 1)
            OLD_PDIR="${PDIR}"
            PDIR="${EDIR}/${RDIR}/${CDIR}/"
            echo "::warning title=Cannot find workflow subdirectory ::Cannot find directory ${OLD_PDIR}, changed to ${PDIR}"
          fi
          if [[ ! -d "${PDIR}" ]]; then
            echo "::error title=Directory heuristic failed ::Still cannot find workflow build directory ${PDIR}"
          fi
          mkdir lib
          echo "Copying shared objects..."
          find "${PDIR}" -type f -name '*.so' -print0 | xargs --null -n1 cp -vf -t lib/
          echo "Compressing HDF5 package..."
          tar -c "${EDIR}" | zstd -z --adapt -T0 -v -o ./hdf5_package.tar.zst
          echo "DONE"

      - name: 'Artifact upload: HDF5 built package (Linux)'
        uses: actions/upload-artifact@v4
        with:
          name: hdf5_linux_package
          path: './source/c/build/hdf5_package.tar.zst'
          compression-level: 0
          if-no-files-found: error

      - name: Create and compress lib directory
        working-directory: ./source/c/build
        shell: bash
        run: |
          tar -C lib -c . | zstd -z --adapt -T0 -v -o ./hdf5_lib.tar.zst

      - name: 'Artifact upload: HDF5 built libraries (Linux)'
        uses: actions/upload-artifact@v4
        continue-on-error: true
        with:
          name: hdf5_linux_lib
          path: './source/c/build/lib'
          compression-level: 9
          if-no-files-found: error
      
      - name: 'Artifact upload: HDF5 built library package (Linux)'
        uses: actions/upload-artifact@v4
        with:
          name: hdf5_linux_lib_package
          path: './source/c/build/hdf5_lib.tar.zst'
          compression-level: 0
          if-no-files-found: error

      - name: Generate debug archive for failed jobs
        if: failure()
        run: tar -c . | zstd -z -T0 --adapt -v -o debug.tar.zst

      - name: Upload debug artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: debug.tar.zst
          name: debug-archive-${{ github.job }}
          compression-level: 0
          if-no-files-found: error
      
  build-jhdf5-linux:
    runs-on: ubuntu-latest

    needs:
      - build-hdf5-linux
    
    steps:
      - name: Check presence of tools
        shell: bash
        run: |
          set -ex
          zstd --help
          xz --help
          tar --help
          gcc --version

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 'Artifact download: HDF5 built package (Linux)'
        uses: actions/download-artifact@v4
        with:
          name: hdf5_linux_package
          path: './source/c/'

      - name: Decompress built HDF5
        working-directory: ./source/c
        shell: bash
        run: |
          set -ex
          mkdir build || true
          pushd build
          zstd -d -c -v -T0 ../hdf5_package.tar.zst | tar -xv
          popd

      - name: Setup JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          java-package: 'jdk'

      - name: Set environment variables for HDF5 build
        run: |
          echo "JHDF5_ADDITIONAL_GCC_FLAGS=-O3 -march=haswell -mtune=znver3 -Wl,--exclude-libs,ALL" >> $GITHUB_ENV
          JAVA_PATH="$(which java)"
          JAVA_BIN_PATH=$(dirname "${JAVA_PATH}")
          JAVA_HOME_PATH=$(dirname "${JAVA_BIN_PATH}")
          if [[ -z ${JAVA_HOME+x} ]]; then
            echo "JAVA_HOME=${JAVA_HOME_PATH}" >> $GITHUB_ENV
          fi
          echo "JVM_INCLUDE_PATH=${JAVA_HOME_PATH}/include" >> $GITHUB_ENV
          echo "VERSION=1.10.11" >> $GITHUB_ENV
          echo "CMAKE_WORKFLOW_PRESET=hict-StdShar-GNUC" >> $GITHUB_ENV

      - name: 'Artifact download: HDF5 built package (Linux)'
        uses: actions/download-artifact@v4
        with:
          name: hdf5_linux_lib
          path: './source/c/jni/'

      - name: "Copy shared objects and list JNI directory"
        shell: bash
        run: |
          set -eux
          pushd ./source/c/jni/
          # find . -type f -name '*.so' -print0 | xargs --null -n1 cp -uavf -t .
          ls -alRh
          popd
      
      - name: Build JHDF5
        working-directory: ./source/c
        shell: bash
        run: |
          ./compile_linux_amd64.sh

      - name: Upload libjhdf5.so
        uses: actions/upload-artifact@v4
        with:
          name: jhdf5_so_linux
          path: './source/c/build/libjhdf5.so'
          compression-level: 9
          if-no-files-found: error

      - name: Generate debug archive for failed jobs
        if: failure()
        run: tar -c . | zstd -z -T0 --adapt -v -o debug.tar.zst

      - name: Upload debug artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: debug.tar.zst
          name: debug-archive-${{ github.job }}
          compression-level: 0
          if-no-files-found: error

  build-jhdf5-java:
    runs-on: ubuntu-latest
    needs:
      - build-jhdf5-linux

    steps:
      - name: Check presence of tools
        shell: bash
        run: |
          set -ex
          zstd --help
          xz --help
          tar --help
          gcc --version

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: 'Artifact download: JHDF5 dynamic library (Linux)'
        uses: actions/download-artifact@v4
        with:
          name: jhdf5_so_linux
          path: libs/native/jhdf5/amd64-Linux/

      - name: 'Artifact download: HDF5 library objects (Linux)'
        uses: actions/download-artifact@v4
        with:
          name: hdf5_linux_lib
          path: libs/native/jhdf5/amd64-Linux/

      - name: Setup JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
          java-package: 'jdk'

      - name: Setup environment
        shell: bash
        run: |
          echo "JAVA_HOME=${JAVA_HOME_8_X64}" >> $GITHUB_ENV

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Fix permissions
        shell: bash
        run: |
          chmod +x gradlew

      # - name: Generate wrapper
      #   shell: bash
      #   run: |
      #     gradle wrapper

      - name: Build with Gradle
        shell: bash
        run: |
          export JAVA_HOME="${JAVA_HOME_8_X64}"
          ./gradlew build

      - name: Upload Gradle build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jhdf5_java
          path: build/libs

      - name: Generate debug archive for failed jobs
        if: failure()
        run: tar -c . | zstd -z -T0 --adapt -v -o debug.tar.zst

      - name: Upload debug artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: debug.tar.zst
          name: debug-archive-${{ github.job }}
          compression-level: 0
          if-no-files-found: error


  release:
    runs-on: ubuntu-latest
    needs:
      - build-hdf5-linux
      - build-jhdf5-linux
      - build-jhdf5-java
      - build-jhdf5-windows-console
      - build-jhdf5-windows-console-noflow

    permissions:
      contents: write
      packages: write

    steps:
      - name: 'Artifact download: HDF5 built package (Linux)'
        uses: actions/download-artifact@v4
        with:
          name: hdf5_linux_package
      
      - name: 'Artifact download: HDF5 library package (Linux)'
        uses: actions/download-artifact@v4
        with:
          name: hdf5_linux_lib_package

      - name: 'Artifact download: JHDF5 dynamic library (Linux)'
        uses: actions/download-artifact@v4
        with:
          name: jhdf5_so_linux

      - name: 'Artifact download: Windows Console build debug'
        uses: actions/download-artifact@v4
        with:
          name: jhdf5_windows_debug_console

      - name: 'Artifact download: Windows Console (noflow) build debug'
        uses: actions/download-artifact@v4
        with:
          name: jhdf5_windows_debug_console_noflow

      - name: Release built artifacts
        uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: release-artifacts
          prerelease: true
          title: "All built artifacts"
          files: |
            **

      - name: Generate debug archive for failed jobs
        if: ${{ failure() }}
        run: tar -c . | zstd -z -T0 --adapt -v -o debug.tar.zst

      - name: Upload debug artifact
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          path: debug.tar.zst
          name: debug-archive-${{ github.job }}
          compression-level: 0
          if-no-files-found: error

  prepare-winbuild:
    runs-on: ubuntu-latest

    steps:
      - name: Check presence of tools
        shell: bash
        run: |
          set -ex
          zstd --help
          xz --help
          tar --help
          gcc --version
          cmake --help

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set environment variables for HDF5 build
        run: |
          echo "UPLOAD_DEBUG_ARCHIVE=true" >> $GITHUB_ENV
          echo "REPLACE_JNI=0" >> $GITHUB_ENV
          echo "CMAKE_WORKFLOW_PRESET=hict-StdShar-GNUC" >> $GITHUB_ENV
      
      - name: Compile HDF5 + Plugins (Linux)
        working-directory: ./source/c
        shell: bash
        run: |
          ./prepare_winbuild.sh
          cp -arf hdf5_plugins* build/
          cp -arf hdf5_plugins* build/CMake-hdf5-1.10.11/
          cp -arf hdf5_plugins* build/CMake-hdf5-1.10.11/hdf5-1.10.11
          cp -arf hidden_presets.json build/CMake-hdf5-1.10.11/hdf5-1.10.11/config/cmake-presets/

      - name: 'Artifact upload: HDF5 prepared for Windows build'
        uses: actions/upload-artifact@v4
        with:
          name: hdf5_prepared_winbuild
          path: './source/c'
          compression-level: 9
          if-no-files-found: error

      - name: Generate debug archive for failed jobs
        if: failure()
        run: tar -c . | zstd -z -T0 --adapt -v -o debug.tar.zst

      - name: Upload debug artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: debug.tar.zst
          name: debug-archive-${{ github.job }}
          compression-level: 0
          if-no-files-found: error

  build-jhdf5-windows-console:
    runs-on: windows-latest
    needs:
      - prepare-winbuild

    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v4

      - name: 'Artifact download: HDF5 prepared winbuild'
        uses: actions/download-artifact@v4
        with:
          name: hdf5_prepared_winbuild
          path: .

      - name: List all files
        run: |
          dir
          tree /A /F

      - name: Setup JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
          java-package: 'jdk'

      - uses: lukka/get-cmake@latest

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
          uwp: false
          spectre: false

      - name: Build using CMake
        continue-on-error: true
        working-directory: '${{ github.workspace }}/build/CMake-hdf5-1.10.11/hdf5-1.10.11'
        run: |
          cmake --workflow --preset='hict-StdShar-MSVC-notest' --fresh

      - name: List all files
        continue-on-error: true
        run: |
          dir
          tree /A /F

      - name: Create and compress build directory
        continue-on-error: true
        working-directory: .
        shell: bash
        run: |
          tar -c . | zstd -z --adapt -T0 -v -o win_console.tar.zst

      - name: Upload Gradle build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jhdf5_windows_debug_console
          path: win_console.tar.zst

      - name: Upload Gradle build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jhdf5_windows_libraries_console
          path: build/**/build/bin/Release/hdf5_java.dll

      - name: Upload debug artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: .
          name: debug-archive-${{ github.job }}
          compression-level: 9
          if-no-files-found: error


  build-jhdf5-windows-console-noflow:
    runs-on: windows-latest
    needs:
      - prepare-winbuild

    steps:
      # - name: Checkout repository
      #   uses: actions/checkout@v4

      - name: 'Artifact download: HDF5 prepared winbuild'
        uses: actions/download-artifact@v4
        with:
          name: hdf5_prepared_winbuild
          path: .

      - name: Setup JDK 8
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '8'
          java-package: 'jdk'

      - uses: lukka/get-cmake@latest

      - uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: amd64
          uwp: false
          spectre: false

      - name: List all files
        run: |
          dir
          tree /A /F

      - name: Build using VS script
        continue-on-error: true
        working-directory: '${{ github.workspace }}\build\CMake-hdf5-1.10.11\'
        run: |
          & ${{ github.workspace }}\build\CMake-hdf5-1.10.11\build-VS2022-64.bat

      - name: List all files
        continue-on-error: true
        run: |
          dir
          tree /A /F

      - name: Create and compress build directory
        continue-on-error: true
        working-directory: .
        shell: bash
        run: |
          tar -c . | zstd -z --adapt -T0 -v -o win_noflow.tar.zst

      - name: Upload Gradle build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jhdf5_windows_debug_console_noflow
          path: win_noflow.tar.zst

      - name: Upload dll artifacts
        uses: actions/upload-artifact@v4
        with:
          name: jhdf5_windows_libraries_console_noflow
          path: build/**/build/bin/Release/hdf5_java.dll

      - name: Upload debug artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          path: .
          name: debug-archive-${{ github.job }}
          compression-level: 9
          if-no-files-found: error
